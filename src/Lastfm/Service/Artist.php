<?php
/**
 * This file is part of the Lastfm API wrapper library.
 * The file is generated based on API documentation available at
 * http://www.last.fm/api
 * 
 * @category  Last.fm
 * @package   Service
 * @link      http://github.com/rtuin/lastfmservice
 */


/** @namespace */
namespace Lastfm\Service;

/**
 * @category Last.fm
 * @package  Service
 * @link     http://github.com/rtuin/lastfmservice
 */
class Artist
{

    /**
     * @val Client An instance of the Lastfm client
     */
    public $client = null;

    /**
     * @param Client|null $client An instance of the Lastfm client
     */
    public function __construct(Client $client = null)
    {
        if (null !== $client &&  $client instanceof Client) {
            $this->client = $client;
        }
    }

    /**
     * @param Client $client An instance of the Lastfm client
     * @return Artist
     */
    public function setClient(Client $client)
    {
        $this->client = $client;
        return $this;
    }

    /**
     * @return Client An instance of the Lastfm client
     */
    public function getClient()
    {
        return $this->client;
    }

    /**
     * Tag an artist with one or more user supplied tags.
     * 
     * @param string $artist The artist name
     * @param string $tags A comma delimited list of user supplied tags to apply to
     * this artist. Accepts a maximum of 10 tags.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function addTags($artist, $tags, $api_sig, $sk)
    {
        return $this->getClient()->call('artist.addtags', array(
            'artist' => $artist,
            'tags' => $tags,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Use the last.fm corrections data to check whether the supplied artist has a
     * correction to a canonical artist
     * 
     * @param string $artist The artist name to correct.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getCorrection($artist)
    {
        return $this->getClient()->call('artist.getcorrection', array(
            'artist' => $artist,
        ));
    }

    /**
     * Get a list of upcoming events for this artist. Easily integratable into
     * calendars, using the ical standard (see feeds section below).
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @param string|null $festivalsonly Whether only festivals should be returned, or
     * all events.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getEvents($artist = null, $mbid = null, $autocorrect = null, $limit = null, $page = null, $festivalsonly = null)
    {
        return $this->getClient()->call('artist.getevents', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'limit' => $limit,
            'page' => $page,
            'festivalsonly' => $festivalsonly,
        ));
    }

    /**
     * Get Images for this artist in a variety of sizes.
     * 
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $artist The artist name
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $order Sort ordering can be either 'popularity' (default) or
     * 'dateadded'. While ordering by popularity officially selected images by labels
     * and artists will be ordered first. This is ignored and set to 'dateadded' when
     * requested as rss.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getImages($mbid = null, $artist = null, $page = null, $limit = null, $autocorrect = null, $order = null)
    {
        return $this->getClient()->call('artist.getimages', array(
            'mbid' => $mbid,
            'artist' => $artist,
            'page' => $page,
            'limit' => $limit,
            'autocorrect' => $autocorrect,
            'order' => $order,
        ));
    }

    /**
     * Get the metadata for an artist. Includes biography.
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $lang The language to return the biography in, expressed as
     * an ISO 639 alpha-2 code.
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $username The username for the context of the request. If
     * supplied, the user's playcount for this artist is included in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getInfo($artist = null, $mbid = null, $lang = null, $autocorrect = null, $username = null)
    {
        return $this->getClient()->call('artist.getinfo', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'lang' => $lang,
            'autocorrect' => $autocorrect,
            'username' => $username,
        ));
    }

    /**
     * Get a paginated list of all the events this artist has played at in the past.
     * 
     * @param string|null $artist The name of the artist you would like to fetch event
     * listings for.
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $page The page of results to return.
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getPastEvents($artist = null, $mbid = null, $page = null, $autocorrect = null, $limit = null)
    {
        return $this->getClient()->call('artist.getpastevents', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'page' => $page,
            'autocorrect' => $autocorrect,
            'limit' => $limit,
        ));
    }

    /**
     * Get a podcast of free mp3s based on an artist
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getPodcast($artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('artist.getpodcast', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get shouts for this artist. Also available as an rss feed.
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getShouts($artist = null, $mbid = null, $limit = null, $autocorrect = null, $page = null)
    {
        return $this->getClient()->call('artist.getshouts', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'limit' => $limit,
            'autocorrect' => $autocorrect,
            'page' => $page,
        ));
    }

    /**
     * Get all the artists similar to this artist
     * 
     * @param string|null $limit Limit the number of similar artists returned
     * @param string|null $artist The artist name
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $mbid The musicbrainz id for the artist
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getSimilar($limit = null, $artist = null, $autocorrect = null, $mbid = null)
    {
        return $this->getClient()->call('artist.getsimilar', array(
            'limit' => $limit,
            'artist' => $artist,
            'autocorrect' => $autocorrect,
            'mbid' => $mbid,
        ));
    }

    /**
     * Get the tags applied by an individual user to an artist on Last.fm.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTags($sk, $api_sig, $artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('artist.gettags', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get the top albums for an artist on Last.fm, ordered by popularity.
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopAlbums($artist = null, $mbid = null, $autocorrect = null, $page = null, $limit = null)
    {
        return $this->getClient()->call('artist.gettopalbums', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'page' => $page,
            'limit' => $limit,
        ));
    }

    /**
     * Get the top fans for an artist on Last.fm, based on listening data.
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopFans($artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('artist.gettopfans', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get the top tags for an artist on Last.fm, ordered by popularity.
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopTags($artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('artist.gettoptags', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get the top tracks by an artist on Last.fm, ordered by popularity
     * 
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the artist
     * @param string|null $autocorrect Transform misspelled artist names into correct
     * artist names, returning the correct version instead. The corrected artist name
     * will be returned in the response.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopTracks($artist = null, $mbid = null, $autocorrect = null, $page = null, $limit = null)
    {
        return $this->getClient()->call('artist.gettoptracks', array(
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'page' => $page,
            'limit' => $limit,
        ));
    }

    /**
     * Remove a user's tag from an artist.
     * 
     * @param string $artist The artist name
     * @param string $tag A single user tag to remove from this artist.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeTag($artist, $tag, $api_sig, $sk)
    {
        return $this->getClient()->call('artist.removetag', array(
            'artist' => $artist,
            'tag' => $tag,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Search for an artist by name. Returns artist matches sorted by relevance.
     * 
     * @param string $artist The artist name
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function search($artist, $limit = null, $page = null)
    {
        return $this->getClient()->call('artist.search', array(
            'artist' => $artist,
            'limit' => $limit,
            'page' => $page,
        ));
    }

    /**
     * Share an artist with Last.fm users or other friends.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $recipient Email Address | Last.fm Username - A comma delimited
     * list of email addresses or Last.fm usernames. Maximum is 10.
     * @param string $artist The artist to share.
     * @param string|null $message An optional message to send with the recommendation.
     * If not supplied a default message will be used.
     * @param string|null $public Optionally show in the sharing users activity feed.
     * Defaults to 0 (false).
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function share($sk, $api_sig, $recipient, $artist, $message = null, $public = null)
    {
        return $this->getClient()->call('artist.share', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'recipient' => $recipient,
            'artist' => $artist,
            'message' => $message,
            'public' => $public,
        ));
    }

    /**
     * Shout in this artist's shoutbox
     * 
     * @param string $artist The name of the artist to shout on.
     * @param string $message The message to post to the shoutbox.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function shout($artist, $message, $api_sig, $sk)
    {
        return $this->getClient()->call('artist.shout', array(
            'artist' => $artist,
            'message' => $message,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }


}

