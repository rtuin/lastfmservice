<?php
/**
 * This file is part of the Lastfm API wrapper library.
 * The file is generated based on API documentation available at
 * http://www.last.fm/api
 * 
 * @category  Last.fm
 * @package   Service
 * @link      http://github.com/rtuin/lastfmservice
 */


/** @namespace */
namespace Lastfm\Service;

/**
 * @category Last.fm
 * @package  Service
 * @link     http://github.com/rtuin/lastfmservice
 */
class Track
{

    /**
     * @val Client An instance of the Lastfm client
     */
    public $client = null;

    /**
     * @param Client|null $client An instance of the Lastfm client
     */
    public function __construct(Client $client = null)
    {
        if (null !== $client &&  $client instanceof Client) {
            $this->client = $client;
        }
    }

    /**
     * @param Client $client An instance of the Lastfm client
     * @return Track
     */
    public function setClient(Client $client)
    {
        $this->client = $client;
        return $this;
    }

    /**
     * @return Client An instance of the Lastfm client
     */
    public function getClient()
    {
        return $this->client;
    }

    /**
     * Tag an album using a list of user supplied tags.
     * 
     * @param string $artist The artist name
     * @param string $track The track name
     * @param string $tags A comma delimited list of user supplied tags to apply to
     * this track. Accepts a maximum of 10 tags.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function addTags($artist, $track, $tags, $api_sig, $sk)
    {
        return $this->getClient()->call('track.addtags', array(
            'artist' => $artist,
            'track' => $track,
            'tags' => $tags,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Ban a track for a given user profile.
     * 
     * @param string $track A track name (utf8 encoded)
     * @param string $artist An artist name (utf8 encoded)
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function ban($track, $artist, $api_sig, $sk)
    {
        return $this->getClient()->call('track.ban', array(
            'track' => $track,
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Get a list of Buy Links for a particular Track.  It is required that you supply
     * either the artist and track params or the mbid param.
     * 
     * @param string|null $artist The artist name
     * @param string|null $track The track name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @param string|null $country A country name, as defined by the ISO 3166-1 country
     * names standard.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getBuylinks($artist = null, $track = null, $mbid = null, $autocorrect = null, $country = null)
    {
        return $this->getClient()->call('track.getbuylinks', array(
            'artist' => $artist,
            'track' => $track,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'country' => $country,
        ));
    }

    /**
     * Use the last.fm corrections data to check whether the supplied track has a
     * correction to a canonical track
     * 
     * @param string $artist The artist name to correct.
     * @param string $track The track name to correct.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getCorrection($artist, $track)
    {
        return $this->getClient()->call('track.getcorrection', array(
            'artist' => $artist,
            'track' => $track,
        ));
    }

    /**
     * Retrieve track metadata associated with a fingerprint id generated by the
     * Last.fm Fingerprinter.  Returns track elements, along with a 'rank' value
     * between 0 and 1 reflecting the confidence for each match. See this blog post for
     * more info.
     * 
     * @param string $fingerprintid The fingerprint id to look up
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getFingerprintMetadata($fingerprintid)
    {
        return $this->getClient()->call('track.getfingerprintmetadata', array(
            'fingerprintid' => $fingerprintid,
        ));
    }

    /**
     * Get the metadata for a track on Last.fm using the artist/track name or a
     * musicbrainz id.
     * 
     * @param string|null $artist The artist name
     * @param string|null $track The track name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @param string|null $username The username for the context of the request. If
     * supplied, the user's playcount for this track and whether they have loved the
     * track is included in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getInfo($artist = null, $track = null, $mbid = null, $autocorrect = null, $username = null)
    {
        return $this->getClient()->call('track.getinfo', array(
            'artist' => $artist,
            'track' => $track,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'username' => $username,
        ));
    }

    /**
     * Get shouts for this track. Also available as an rss feed.
     * 
     * @param string|null $track The track name
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getShouts($track = null, $artist = null, $mbid = null, $limit = null, $autocorrect = null, $page = null)
    {
        return $this->getClient()->call('track.getshouts', array(
            'track' => $track,
            'artist' => $artist,
            'mbid' => $mbid,
            'limit' => $limit,
            'autocorrect' => $autocorrect,
            'page' => $page,
        ));
    }

    /**
     * Get the similar tracks for this track on Last.fm, based on listening data.
     * 
     * @param string|null $track The track name
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @param string|null $limit Maximum number of similar tracks to return
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getSimilar($track = null, $artist = null, $mbid = null, $autocorrect = null, $limit = null)
    {
        return $this->getClient()->call('track.getsimilar', array(
            'track' => $track,
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
            'limit' => $limit,
        ));
    }

    /**
     * Get the tags applied by an individual user to a track on Last.fm.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string|null $artist The artist name
     * @param string|null $track The track name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTags($sk, $api_sig, $artist = null, $track = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('track.gettags', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'artist' => $artist,
            'track' => $track,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get the top fans for this track on Last.fm, based on listening data. Supply
     * either track & artist name or musicbrainz id.
     * 
     * @param string|null $track The track name
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopFans($track = null, $artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('track.gettopfans', array(
            'track' => $track,
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Get the top tags for this track on Last.fm, ordered by tag count. Supply either
     * track & artist name or mbid.
     * 
     * @param string|null $track The track name
     * @param string|null $artist The artist name
     * @param string|null $mbid The musicbrainz id for the track
     * @param string|null $autocorrect Transform misspelled artist and track names into
     * correct artist and track names, returning the correct version instead. The
     * corrected artist and track name will be returned in the response.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTopTags($track = null, $artist = null, $mbid = null, $autocorrect = null)
    {
        return $this->getClient()->call('track.gettoptags', array(
            'track' => $track,
            'artist' => $artist,
            'mbid' => $mbid,
            'autocorrect' => $autocorrect,
        ));
    }

    /**
     * Love a track for a user profile.
     * 
     * @param string $track A track name (utf8 encoded)
     * @param string $artist An artist name (utf8 encoded)
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function love($track, $artist, $api_sig, $sk)
    {
        return $this->getClient()->call('track.love', array(
            'track' => $track,
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Remove a user's tag from a track.
     * 
     * @param string $artist The artist name
     * @param string $track The track name
     * @param string $tag A single user tag to remove from this track.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeTag($artist, $track, $tag, $api_sig, $sk)
    {
        return $this->getClient()->call('track.removetag', array(
            'artist' => $artist,
            'track' => $track,
            'tag' => $tag,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Used to add a track-play to a user's profile. Scrobble a track, or a batch of
     * tracks. Tracks are passed to the service using array notation for each of the
     * below params, up to a maximum of 50 scrobbles per batch [0<=i<=49]. If you are
     * only sending a single scrobble the array notation may be ommited. Note: Extra
     * care should be taken while calculating the signature when using array notation
     * as the parameter names MUST be sorted according to the ASCII table (i.e.,
     * artist[10] comes before artist[1]). It is important to not use the corrections
     * returned by the now playing service as input for the scrobble request, unless
     * they have been explicitly approved by the user. Parameter names are case
     * sensitive.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $artist The artist name.
     * @param string $track The track name.
     * @param string $timestamp The time the track started playing, in UNIX timestamp
     * format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This
     * must be in the UTC time zone.
     * @param string|null $album The album name.
     * @param string|null $albumArtist The album artist - if this differs from the
     * track artist.
     * @param string|null $duration The length of the track in seconds.
     * @param string|null $streamId The stream id for this track received from the
     * radio.getPlaylist service, if scrobbling Last.fm radio
     * @param string|null $chosenByUser Set to 1 if the user chose this song, or 0 if
     * the song was chosen by someone else (such as a radio station or recommendation
     * service). Assumes 1 if not specified
     * @param string|null $context Sub-client version (not public, only enabled for
     * certain API keys)
     * @param string|null $trackNumber The track number of the track on the album.
     * @param string|null $mbid The MusicBrainz Track ID.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function scrobble($sk, $api_sig, $artist, $track, $timestamp, $album = null, $albumArtist = null, $duration = null, $streamId = null, $chosenByUser = null, $context = null, $trackNumber = null, $mbid = null)
    {
        return $this->getClient()->call('track.scrobble', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'artist' => $artist,
            'track' => $track,
            'timestamp' => $timestamp,
            'album' => $album,
            'albumArtist' => $albumArtist,
            'duration' => $duration,
            'streamId' => $streamId,
            'chosenByUser' => $chosenByUser,
            'context' => $context,
            'trackNumber' => $trackNumber,
            'mbid' => $mbid,
        ));
    }

    /**
     * Search for a track by track name. Returns track matches sorted by relevance.
     * 
     * @param string $track The track name
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 30.
     * @param string|null $page The page number to fetch. Defaults to first page.
     * @param string|null $artist Narrow your search by specifying an artist.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function search($track, $limit = null, $page = null, $artist = null)
    {
        return $this->getClient()->call('track.search', array(
            'track' => $track,
            'limit' => $limit,
            'page' => $page,
            'artist' => $artist,
        ));
    }

    /**
     * Share a track twith one or more Last.fm users or other friends.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $recipient Email Address | Last.fm Username - A comma delimited
     * list of email addresses or Last.fm usernames. Maximum is 10.
     * @param string $track A track name.
     * @param string $artist An artist name.
     * @param string|null $public Optionally show in the sharing users activity feed.
     * Defaults to 0 (false).
     * @param string|null $message An optional message to send with the recommendation.
     * If not supplied a default message will be used.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function share($sk, $api_sig, $recipient, $track, $artist, $public = null, $message = null)
    {
        return $this->getClient()->call('track.share', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'recipient' => $recipient,
            'track' => $track,
            'artist' => $artist,
            'public' => $public,
            'message' => $message,
        ));
    }

    /**
     * UnBan a track for a user profile.
     * 
     * @param string $track A track name (utf8 encoded)
     * @param string $artist An artist name (utf8 encoded)
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function unban($track, $artist, $api_sig, $sk)
    {
        return $this->getClient()->call('track.unban', array(
            'track' => $track,
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * UnLove a track for a user profile.
     * 
     * @param string $track A track name (utf8 encoded)
     * @param string $artist An artist name (utf8 encoded)
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function unlove($track, $artist, $api_sig, $sk)
    {
        return $this->getClient()->call('track.unlove', array(
            'track' => $track,
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Used to notify Last.fm that a user has started listening to a track. Parameter
     * names are case sensitive.
     * 
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $artist The artist name.
     * @param string $track The track name.
     * @param string|null $album The album name.
     * @param string|null $albumArtist The album artist - if this differs from the
     * track artist.
     * @param string|null $context Sub-client version (not public, only enabled for
     * certain API keys)
     * @param string|null $trackNumber The track number of the track on the album.
     * @param string|null $mbid The MusicBrainz Track ID.
     * @param string|null $duration The length of the track in seconds.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function updateNowPlaying($sk, $api_sig, $artist, $track, $album = null, $albumArtist = null, $context = null, $trackNumber = null, $mbid = null, $duration = null)
    {
        return $this->getClient()->call('track.updatenowplaying', array(
            'sk' => $sk,
            'api_sig' => $api_sig,
            'artist' => $artist,
            'track' => $track,
            'album' => $album,
            'albumArtist' => $albumArtist,
            'context' => $context,
            'trackNumber' => $trackNumber,
            'mbid' => $mbid,
            'duration' => $duration,
        ));
    }


}

