<?php
/**
 * This file is part of the Lastfm API wrapper library.
 * The file is generated based on API documentation available at
 * http://www.last.fm/api
 * 
 * @category  Last.fm
 * @package   Service
 * @link      http://github.com/rtuin/lastfmservice
 */


/** @namespace */
namespace Lastfm\Service;

/**
 * @category Last.fm
 * @package  Service
 * @link     http://github.com/rtuin/lastfmservice
 */
class Library
{

    /**
     * @val Client An instance of the Lastfm client
     */
    public $client = null;

    /**
     * @param Client|null $client An instance of the Lastfm client
     */
    public function __construct(Client $client = null)
    {
        if (null !== $client &&  $client instanceof Client) {
            $this->client = $client;
        }
    }

    /**
     * @param Client $client An instance of the Lastfm client
     * @return Library
     */
    public function setClient(Client $client)
    {
        $this->client = $client;
        return $this;
    }

    /**
     * @return Client An instance of the Lastfm client
     */
    public function getClient()
    {
        return $this->client;
    }

    /**
     * Add an album to a user's Last.fm library
     * 
     * @param string $artist The artist that composed the track
     * @param string $album The album name you wish to add
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function addAlbum($artist, $album, $api_sig, $sk)
    {
        return $this->getClient()->call('library.addalbum', array(
            'artist' => $artist,
            'album' => $album,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Add an artist to a user's Last.fm library
     * 
     * @param string $artist The artist name you wish to add
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function addArtist($artist, $api_sig, $sk)
    {
        return $this->getClient()->call('library.addartist', array(
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Add a track to a user's Last.fm library
     * 
     * @param string $artist The artist that composed the track
     * @param string $track The track name you wish to add
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function addTrack($artist, $track, $api_sig, $sk)
    {
        return $this->getClient()->call('library.addtrack', array(
            'artist' => $artist,
            'track' => $track,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * A paginated list of all the albums in a user's library, with play counts and tag
     * counts.
     * 
     * @param string $user The user whose library you want to fetch.
     * @param string|null $artist An artist by which to filter tracks
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $page The page number you wish to scan to.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getAlbums($user, $artist = null, $limit = null, $page = null)
    {
        return $this->getClient()->call('library.getalbums', array(
            'user' => $user,
            'artist' => $artist,
            'limit' => $limit,
            'page' => $page,
        ));
    }

    /**
     * A paginated list of all the artists in a user's library, with play counts and
     * tag counts.
     * 
     * @param string $user The user whose library you want to fetch.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @param string|null $page The page number you wish to scan to.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getArtists($user, $limit = null, $page = null)
    {
        return $this->getClient()->call('library.getartists', array(
            'user' => $user,
            'limit' => $limit,
            'page' => $page,
        ));
    }

    /**
     * A paginated list of all the tracks in a user's library, with play counts and tag
     * counts.
     * 
     * @param string $user The user whose library you want to fetch.
     * @param string|null $artist An artist by which to filter tracks
     * @param string|null $album An album by which to filter tracks (needs an artist)
     * @param string|null $page The page number you wish to scan to.
     * @param string|null $limit The number of results to fetch per page. Defaults to
     * 50.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function getTracks($user, $artist = null, $album = null, $page = null, $limit = null)
    {
        return $this->getClient()->call('library.gettracks', array(
            'user' => $user,
            'artist' => $artist,
            'album' => $album,
            'page' => $page,
            'limit' => $limit,
        ));
    }

    /**
     * Remove an album from a user's Last.fm library
     * 
     * @param string $artist The artist that composed the album
     * @param string $album The name of the album you wish to remove
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeAlbum($artist, $album, $api_sig, $sk)
    {
        return $this->getClient()->call('library.removealbum', array(
            'artist' => $artist,
            'album' => $album,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Remove an artist from a user's Last.fm library
     * 
     * @param string $artist The artist name you wish to remove
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeArtist($artist, $api_sig, $sk)
    {
        return $this->getClient()->call('library.removeartist', array(
            'artist' => $artist,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Remove a scrobble from a user's Last.fm library
     * 
     * @param string $artist The artist that composed the track
     * @param string $track The name of the track
     * @param string $timestamp The unix timestamp of the scrobble that you wish to
     * remove
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeScrobble($artist, $track, $timestamp, $api_sig, $sk)
    {
        return $this->getClient()->call('library.removescrobble', array(
            'artist' => $artist,
            'track' => $track,
            'timestamp' => $timestamp,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }

    /**
     * Remove a track from a user's Last.fm library
     * 
     * @param string $artist The artist that composed the track
     * @param string $track The name of the track that you wish to remove
     * @param string $api_sig A Last.fm method signature. See authentication for more
     * information.
     * @param string $sk A session key generated by authenticating a user via the
     * authentication protocol.
     * @return SimpleXmlElement The direct response from the Lastfm server
     */
    public function removeTrack($artist, $track, $api_sig, $sk)
    {
        return $this->getClient()->call('library.removetrack', array(
            'artist' => $artist,
            'track' => $track,
            'api_sig' => $api_sig,
            'sk' => $sk,
        ));
    }


}

